#!/bin/bash

#always run from within LOGGING_REPO
function get_logging_hash {
	$(git log --grep=\""$1"\" -n1 \
	--format=\"%H\")
}

OLD_HEAD=$1
NEW_HEAD=$2
#1 if branch checkout, 0 if file checkout
FLAG=$3

if [ $FLAG = 0 ]; then
	#we don't need to do anything for a file checkout
	exit 0
fi

MAIN_REPO=$PWD
LOGGING_REPO=$MAIN_REPO/logs
NEW_BRANCH=$(git rev-parse --abbrev-ref HEAD)

echo $NEW_BRANCH

#find the oldest common commit between the two heads
MAIN_HASH=$(git merge-base "$OLD_HEAD" "$NEW_HEAD")
echo $MAIN_HASH

#switch into the logging repo
cd $LOGGING_REPO
echo "Logging repo checkout"

#get the hash for the logging commit corresponding
#to the old hash
LOGGING_HASH=$(get_logging_hash "$MAIN_HASH")
echo $LOGGING_HASH

#switch over to the new branch in the logging repo,
#cresting it if neccessary
if [ -z "$LOGGING_HASH" ]; then
	echo 'orphan branch'
	#if the logging hash doesn't exist, make it an orphan branch
	#if it doesn't exist
	git checkout $NEW_BRANCH 2>/dev/null \
	|| git checkout --orphan $NEW_BRANCH $(git log -n 1 --format="%H")
else
	echo 'regular branch'
	#otherwise, just make the new branch start at the 
	#commit specified by the logging hash, if it doesn't exist
	git checkout $NEW_BRANCH 2>/dev/null \
	|| git checkout -b $NEW_BRANCH $LOGGING_HASH
fi

#go back to the main repo
cd $MAIN_REPO
