#!/bin/bash

#log path - should be consistent with other scripts
LOGS_REF=refs/notes/productivity
LOG_PATH=.commit.log
LOG=

#only log anything if commit-msg already set up the log file
if [ -f "$LOG_PATH" ]; then
	#mark start of git info
	LOG=$(printf '%s\n\t"git_info":{' "$LOG")

	#record the commit hash
	CUR_HASH=$(git rev-parse HEAD)
	LOG=$(printf '%s\n\t\t"commit_hash":"%s",' "$LOG" "$CUR_HASH")

	#record the current branch
	CUR_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	LOG=$(printf '%s\n\t\t"branch":"%s"' "$LOG" "$CUR_BRANCH")

	#mark end of git info
	LOG=$(printf '%s\n\t}' "$LOG")

    #mark end of autogenerated info
    LOG=$(printf '%s\n}' "$LOG")

    #mark end of log
    LOG=$(printf '%s\n}\n}' "$LOG")

	#write to file
	printf "$LOG" >> $LOG_PATH

	#save log as a git note
	git notes --ref $LOGS_REF \
	add -F $LOG_PATH \
	-m "productivity log for commit $CUR_HASH in branch $CUR_BRANCH" \

	#delete log file, now that it has been saved as a git note
	rm $LOG_PATH
	
	for remote in $(git remote) ; do
		remote_logs_ref=${LOGS_REF/notes/"remotes/$remote/notes"}
		git notes --ref "$LOGS_REF" merge -s cat_sort_uniq "$remote_logs_ref" 2> /dev/null
	done
fi
